#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <iostream>
#include <iterator>
#pragma once
using namespace std;

namespace wdis {
	class Emitter {
	public:
		bool isDebug;
		Emitter(bool debug) {
			isDebug = debug;
			str << "// Decompiled Web Assembly generated by wdis" << endl
			<< "// Preamble:" << endl
			<< "#include <stdint.h>" << endl
			<< "#include <math.h>" << endl
			<< "typedef float float32_t;" << endl
			<< "typedef double float64_t;" << endl << endl;
		}
		stringstream& operator<<(string out) {
			str << out;
			if (isDebug) {
				cout << "Emitting '" << out << "'" << endl;
			}
			return str;
		}
		void comment(string cmt) {
			str << "// " << cmt << endl;
			if (isDebug) {
				cout << "Emitting comment '" << cmt << "'" << endl;
			}
		}
		void ln() {
			str << endl;
			if (isDebug) {
				cout << "Emmitting newline" << endl;
			}
		}
		string getCode() {
			return str.str();
		}
	protected:
		stringstream str;
	};
} // namespace wdis